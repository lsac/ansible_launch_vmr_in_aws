---
 - name: Provision VMR on EC2
   local_action:
     module: ec2
     key_name: "{{ ec2_keypair }}"
     group_id: "{{ ec2_security_group }}"
     instance_type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
     region: "{{ ec2_region }}"
     instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
     assign_public_ip: yes
     wait: true
     count: 1
     volumes: 
     - device_name: /dev/sda1
       device_type: gp2
       volume_size: "{{ ec2_volume_size }}"
       delete_on_termination: true
   register: ec2

 - debug: var=item
   with_items: "{{ ec2.instances }}"

 - add_host: name={{ item.public_ip }}
             groups=tag_Type_{{ec2_tag_Type}},tag_Environment_{{ec2_tag_Environment}}
             ec2_region={{ec2_region}} 
             ec2_tag_Name={{ec2_tag_Name}}
             ec2_tag_Type={{ec2_tag_Type}}
             ec2_tag_Environment={{ec2_tag_Environment}}
             ec2_ip_address={{item.public_ip}}
   with_items: "{{ ec2.instances }}"

 - name: Wait for the instances to boot by checking the ssh port
   wait_for: host={{item.public_ip}} port=22 delay=60 timeout=320 state=started
   with_items: "{{ ec2.instances }}"

 - name: Redundancy Show
   uri:
      url: "http://{{ item.public_ip }}:8080/SEMP"
      method: GET
      user: admin
      password: admin
      body:  "<rpc semp-version='soltr/8_3VMR'>\
             <show><redundancy><detail/></redundancy></show></rpc>"
      force_basic_auth: yes
      status_code: 200
      body_format: raw
      return_content: yes
   register: rpc_reply
   ignore_errors: True
   until: rpc_reply.content.find("code=\"ok\"") != -1
   retries: 5
   delay: 10
   with_items: "{{ ec2.instances }}"

 - name: Create Queue
   uri:
      url: "http://{{ item.public_ip }}:8080/SEMP/v2/config/msgVpns/default/queues"
      method: POST
      user: admin
      password: admin
      headers:
        Content-Type: "application/json"
      body:  "{ \"queueName\":\"my_sample_queue\", \"ingressEnabled\":true, \"egressEnabled\":true, \"permission\":\"consume\" }"
      force_basic_auth: yes
      status_code: 200
      body_format: raw
      return_content: yes
   register: result
   ignore_errors: True
   until: result.content.find("\"responseCode\":200") != -1
   retries: 5
   delay: 10
   with_items: "{{ ec2.instances }}"

 - name: Test Simple Flow To Queue
   shell: cd testspace; svn co file:///home/ubuntu/myrepo/jcsmp; cd jcsmp/samples; ant build; cd bin; chmod u+x run.sh; ./run.sh introsamples.SimpleFlowToQueue -h {{ item.public_ip }} -u default@default --durable; cd /home/ubuntu/testspace; rm -rf jcsmp
   args:
      chdir: /home/ubuntu/
   with_items: "{{ ec2.instances }}"

 - name: Terminate VMR
   ec2:
      state: 'absent'
      region: '{{ item.region }}'
      instance_ids: '{{ item.id }}'
   with_items: "{{ ec2.instances }}"

